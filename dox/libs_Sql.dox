/****************************************************************************
 **
 ** Copyright (C) 2011-2019 Philippe Steinmann.
 **
 ** This file is part of Mdt library.
 **
 ** Mdt is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** Mdt is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with Mdt.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/

/*! \page libs_Sql Sql library
 *
 * 
 *
 * \section sql_schema SQL Schema
 *
 * \section sql_queries SQL queries
 *
 * In Mdt Sql the notion of statement and query are separated.
 *
 * The statement, that is copiable, holds the informations,
 *  and can generate a SQL statement string.
 *
 * Here is a example of a insert statement:
 * \code
 * #include <Mdt/Sql/InsertStatement.h>
 *
 * using namespace Mdt::Sql;
 *
 * InsertStatement statement;
 * statement.setTableName("Person_tbl");
 * statement.addValue( FieldName("FirstName"), "First name 1" );
 * statement.addValue( FieldName("LastName"), "Last name 1" );
 * \endcode
 *
 * The query will use the statement to excute the query:
 * \code
 * #include <Mdt/Sql/InsertStatement.h>
 * #include <Mdt/Sql/InsertQuery.h>
 * #include <QSqlDatabase>
 *
 * using namespace Mdt::Sql;
 *
 * InsertStatement statement;
 * // Setup statement here
 *
 * QSqlDatabase dbConnection;
 * // To setup dbConnection see QSqlDatabase documentation
 *
 * InsertQuery query(dbConnection);
 * if(!query.execStatement(statement)){
 *   // Error handling. query.lastError() constains a error description.
 * }
 * \endcode
 *
 * Internally, QSqlQuery is used, and Mdt Sql helps to avoid
 *  some boilerplate code for the common queries.
 *
 * It is not mandatory to use the statement,
 *  a query can be used directly:
 * \code
 * #include <Mdt/Sql/InsertQuery.h>
 * #include <QSqlDatabase>
 *
 * using namespace Mdt::Sql;
 *
 * QSqlDatabase dbConnection;
 * // To setup dbConnection see QSqlDatabase documentation
 *
 * InsertQuery query(dbConnection);
 * query.setTableName("Person_tbl");
 * query.addValue( FieldName("FirstName"), "First name 1" );
 * query.addValue( FieldName("LastName"), "Last name 1" );
 * if(!query.exec()){
 *   // Error handling. query.lastError() constains a error description.
 * }
 * \endcode
 *
 * To insert elements into a table,
 *  a list of field value pairs is provided to the query.
 *
 * Other type of queries, like delete, update and select, will need
 *  some conditions to limit the actions:
 * \code
 * #include <Mdt/Sql/DeleteStatement.h>
 *
 * using namespace Mdt::Sql;
 *
 * DeleteStatement statement;
 * statement.setTableName("Person_tbl");
 * statement.setConditions( ?? ); // How do we specify the conditions ?
 * \endcode
 *
 * The above example opens the concept of filter expression.
 *
 * \subsection sql_filter_expression Filter expression
 *
 * To express somewhat arbitrary conditions,
 *  the \ref libs_QueryExpression library is used.
 *
 * The above delete statement example could become:
 * \code
 * #include <Mdt/Sql/DeleteStatement.h>
 *
 * using namespace Mdt::Sql;
 *
 * QueryField id("Id_PK");
 *
 * DeleteStatement statement;
 * statement.setTableName("Person_tbl");
 * statement.setConditions( id == 21 );
 * \endcode
 *
 * Notice that Mdt::Sql::QueryField is a type alias to Mdt::QueryExpression::QueryField.
 *  The more explicit code will look like:
 * \code
 * #include <Mdt/Sql/DeleteStatement.h>
 * #include <Mdt/QueryExpression/QueryField.h>
 *
 * using namespace Mdt::Sql;
 * using Mdt::QueryExpression::QueryField;
 *
 * QueryField id("Id_PK");
 *
 * DeleteStatement statement;
 * statement.setTableName("Person_tbl");
 * statement.setConditions( id == 21 );
 * \endcode
 *
 * If the \ref libs_Reflection is used,
 *  the delete statement could become:
 * \code
 * #include "PersonDataStruct.h"
 * #include <Mdt/Sql/ReflectionDeleteStatement.h>
 *
 * using namespace Mdt::Sql;
 *
 * ReflectionQueryField<PersonDef::id> id;
 *
 * ReflectionDeleteStatement<PersonDef> statement;
 * statement.setConditions( id == 21 );
 * \endcode
 *
 * \section sql_storage_table SQL storage table
 *
 * A storage table can be used to implement a repository.
 *
 * \sa \ref example_PersonRepository
 * \sa \ref example_CableLinkRepository
 *
 */
